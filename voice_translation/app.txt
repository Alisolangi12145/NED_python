import streamlit as st
from googletrans import Translator
import speech_recognition as sr
from gtts import gTTS
import io
import base64
import os

# Function to translate text
def translate_text(source_language, target_language, text_to_translate):
    translator = Translator()
    translation = translator.translate(text_to_translate, src=source_language, dest=target_language)
    return translation.text

# Function to record and translate voice
def record_and_translate_voice(source_language, target_language):
    st.markdown("## Voice to Voice Translation")
    recognizer = sr.Recognizer()
    audio = None

    with st.expander("Voice Translation"):
        st.write("Click the button below to start voice recording.")
        if st.button("Start Recording"):
            with sr.Microphone() as source:
                st.write("Recording... Click the button again to stop recording.")
                audio = recognizer.listen(source)

        if audio:
            try:
                st.write("Translating...")
                spoken_text = recognizer.recognize_google(audio, language=source_language)
                translated_text = translate_text(source_language, target_language, spoken_text)
                st.write(f"Original Text ({source_language}):", spoken_text)
                st.write(f"Translated Text ({target_language}):", translated_text)

                # Convert translated text to speech in the target language
                tts = gTTS(translated_text, lang=target_language)
                
                # Define the path to the Desktop folder
                desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
                
                # Save the translated speech to the Desktop folder
                translated_audio_path = os.path.join(desktop_path, "translated_audio.mp3")
                tts.save(translated_audio_path)
                st.audio(translated_audio_path, format="audio/mp3")

                # Add a download button for the translated audio
                st.markdown("### Download Translated Audio")
                st.write("Click the link below to download the translated audio.")
                st.markdown(get_binary_file_downloader_html("translated_audio.mp3", translated_audio_path), unsafe_allow_html=True)

            except sr.UnknownValueError:
                st.write("Could not understand audio")
            except sr.RequestError as e:
                st.write(f"Could not request results; {e}")

# Function to create a download link for binary data
def get_binary_file_downloader_html(file_name, file_path):
    with open(file_path, 'rb') as f:
        audio_data = f.read()
    base64_audio = base64.b64encode(audio_data).decode('utf-8')
    download_link = f'<a href="data:audio/mp3;base64,{base64_audio}" download="{file_name}">Download Translated Audio</a>'
    return download_link

# Main Streamlit app
st.title("Language Translator App")

st.markdown("## Step 1: Translate Text")

# Input for source language and target language
source_language = st.selectbox("Select Source Language", ["en", "fr", "es", "de", "it", "ur"])  # You can add more languages
target_language = st.selectbox("Select Target Language", ["fr", "es", "de", "it", "en", "ur"])  # You can add more languages

text_to_translate = st.text_area("Enter the text to translate:")

if st.button("Translate"):
    if text_to_translate:
        translated_text = translate_text(source_language, target_language, text_to_translate)
        st.write(f"Translated Text ({target_language}):", translated_text)

record_and_translate_voice(source_language, target_language)
